set number
set confirm=permdelete
set relativenumber
set vicmd=nvim
set syscalls
set trash
set history=1000
set followlinks
set nofastrun
set sortnumbers
set undolevels=200
set vimhelp
set norunexec
colorscheme tokyonight
set timefmt='%d %b %Y'
set wildmenu
set wildstyle=popup
set suggestoptions=normal,visual,view,otherpane,keys,marks,registers,delay:500
set ignorecase
set smartcase
set dirsize=size
set hlsearch
set noiec
set sizefmt=units:iec,precision:1,space
set iooptions=fastfilecloning
set tuioptions=pru
set incsearch
set scrolloff=1
set statusline="  %A %15E %20d  "
" ------------------------------------------------------------------------------

command! trashList :lstrash "list items in trash directory

command! giocopy :execute '!clear; gio copy -p %"r" %"d/ %S' | redraw

"mount mtp devices
"command! mountMtp !~/MyScripts/mount_phone.sh &>/dev/null &
"command! unmountMtp !fusermount -uzq ~/mnt

"send file using kdeconnect
command! sendFile :!~/.config/rofi/scripts/kdeconnect_sendfile.sh "$(echo "%d/%c" | tr -d "\\\\")" &

"open file with spek
command! spek :!spek %c &>/dev/null &

" zoxide, faster way to navigate
" Use term() instead system() which makes sure
" external interactive applications won't
" affect the way terminal is used by vifm
" This fix weird characters at the beginning of the path
command! zoxide :execute 'cd "'.term('zoxide query %a').'"'

" rsync command specially useful for partial copies
" command! rsync rsync --archive --compress --info=progress2 --human-readable --update --delete %f %D %s

" cp command always recursive, preserving all attributes and only updating old files
command! cp cp -avu %f %D %s

" Show report file system disk space usage
command! df df -h %m 2> /dev/null

" Show the size of the selected element
command! du du -sh %f %m

" diff with vim
command! diff nvim -d %f %F

" Create symbolic link
command! link ln -s %f:p %D

" zip selected files/folders
command! zip zip -r %f.zip %f

" unzip selected zipped files
command! unzip unzip %c -d $(echo "%c" | tr -d ".zip") &

" unrar selected rar files
command! unrar unrar x %c &

" untar selected archived files
command! untar tar xf %f %s

" tar selected files
command! tar tar cvaf %a %f %s

" use e() zsh function for extracting any compressed file or folder
command! extract :!e %f %s

" use c() zsh function for compressing any file or folder
command! compress :!c %a %s

" Repeat last command to the selected files/folders
command! run !! ./%f

" Reload vifmrc  file
command! reload :write | restart

" Find files with FZF and fd
command! fzffile :set noquickview | :execute 'goto "'.term('fd --hidden --follow --color=always --type f . $HOME | fzf --preview-window wrap 2>/dev/tty ').'"%IU' | redraw

" Find folders with FZF and fd
command! fzffolder :set noquickview | :execute 'goto "'.term('fd --hidden --follow --color=always --type d . $HOME | fzf --preview-window wrap 2>/dev/tty ').'"%IU' | redraw

command! mc :mkdir! '%a' | cd '%a'
command! md :mkdir! '%a'
command! sudo :!sudo vifm %d %D
command! vgrep nvim "+grep %a"
" ------------------------------------------------------------------------------

" The file type is for the default programs to be used with
" a file extension.
" :filetype pattern1,pattern2 defaultprogram,program2
" :fileviewer pattern1,pattern2 consoleviewer
" The other programs for the file type can be accessed with the :file command
" The command macros %f, %F, %d, %F may be used in the commands.
" The %a macro is ignored.  To use a % you must put %%.

" For automated FUSE mounts, you must register an extension with :file[x]type
" in one of following formats:
"
" :filetype extensions FUSE_MOUNT|some_mount_command using %SOURCE_FILE and %DESTINATION_DIR variables
" %SOURCE_FILE and %DESTINATION_DIR are filled in by vifm at runtime.
" A sample line might look like this:
" :filetype *.zip,*.jar,*.war,*.ear FUSE_MOUNT|fuse-zip %SOURCE_FILE %DESTINATION_DIR
"
" :filetype extensions FUSE_MOUNT2|some_mount_command using %PARAM and %DESTINATION_DIR variables
" %PARAM and %DESTINATION_DIR are filled in by vifm at runtime.
" A sample line might look like this:
" :filetype *.ssh FUSE_MOUNT2|sshfs %PARAM %DESTINATION_DIR
" %PARAM value is filled from the first line of file (whole line).
" Example first line for SshMount filetype: root@127.0.0.1:/
"
" You can also add %CLEAR if you want to clear screen before running FUSE
" program.

" Pdf
filetype *.pdf
        \ zathura %c %i &
fileviewer *.pdf
        \ vifmimg pdf %px %py %pw %ph %c
        \ %pc
        \ vifmimg clear

" Epub
filetype *.epub
        \  com.github.johnfactotum.Foliate %c %i &

" Djvu
filextype *.djvu
        \ {View in zathura}
        \ zathura %f

" Audio
filextype *.wav,*.mp3,*.flac,*.m4a,*.wma,*.ape,*.ac3,*.og[agx],*.spx,*.opus
       \ ffplay -nodisp -autoexit %f,
       \ {Play using MPlayer}
       \ mplayer %f,
fileviewer *.mp3 mediainfo
fileviewer *.flac soxi

" Video
filextype *.avi,*.mp4,*.wmv,*.dat,*.3gp,*.ogv,*.mkv,*.mpg,*.mpeg,*.vob,
         \*.fl[icv],*.m2v,*.mov,*.webm,*.ts,*.mts,*.m4v,*.r[am],*.qt,*.divx,
         \*.as[fx]
        \ {Play using mpv}
        \ mpv %"f &>/dev/null &,
fileviewer *.avi,*.mp4,*.wmv,*.dat,*.3gp,*.ogv,*.mkv,*.mpg,*.mpeg,*.vob,
          \*.fl[icv],*.m2v,*.mov,*.webm,*.ts,*.mts,*.m4v,*.r[am],*.qt,*.divx,
          \*.as[fx]
          \ mediainfo
          "\ vifmimg video %px %py %pw %ph %c
          "\ %pc
          "\ vifmimg clear

" Web
filextype *.html,*.htm
        \ nvim %c &,
        \ vivaldi %f &,
filetype *.html,*.htm vivaldi

" Object
filetype *.o nm %f | less

" Man page
filetype *.[1-8] man ./%c
fileviewer *.[1-8] man ./%c | col -b

" font
fileviewer *.ttf,*.otf
        \ vifmimg font %px %py %pw %ph %c
        \ %pc
        \ vifmimg clear


" Images
filextype *.bmp,*.jpg,*.jpeg,*.png,*.gif,*.xpm
        \ sxiv %"f &,
fileviewer *.bmp,*.jpg,*.jpeg,*.png,*.gif,*.xpm
        \ vifmimg draw %px %py %pw %ph %c
        \ %pc
        \ vifmimg clear
        
" GPG signature
filetype *.asc
       \ {Check signature}
       \ !!gpg --verify %c,

" Torrent
filetype *.torrent qbittorrent %f &
"fileviewer *.torrent dumptorrent -v %c

" FuseZipMount
filetype *.zip,*.jar,*.war,*.ear,*.oxt,*.apkg
       \ {Mount with fuse-zip}
       \ FUSE_MOUNT|fuse-zip %SOURCE_FILE %DESTINATION_DIR,
       \ {Extract here}
       \ tar -xf %c,
fileviewer *.zip,*.jar,*.war,*.ear,*.oxt zip -sf %c

" ArchiveMount
filetype *.tar,*.tar.bz2,*.tbz2,*.tgz,*.tar.gz,*.tar.xz,*.txz
       \ {Mount with archivemount}
       \ FUSE_MOUNT|archivemount %SOURCE_FILE %DESTINATION_DIR,
fileviewer *.tgz,*.tar.gz tar -tzf %c
fileviewer *.tar.bz2,*.tbz2 tar -tjf %c
fileviewer *.tar.txz,*.txz xz --list %c
fileviewer *.tar tar -tf %c

" Rar2FsMount and rar archives
filetype *.rar
       \ {Mount with rar2fs}
       \ FUSE_MOUNT|rar2fs %SOURCE_FILE %DESTINATION_DIR,
fileviewer *.rar unrar v %c

" IsoMount
filetype *.iso
       \ {Mount with fuseiso}
       \ FUSE_MOUNT|fuseiso %SOURCE_FILE %DESTINATION_DIR,

" SshMount
filetype *.ssh
       \ {Mount with sshfs}
       \ FUSE_MOUNT2|sshfs %PARAM %DESTINATION_DIR %FOREGROUND,

" FtpMount
filetype *.ftp
       \ {Mount with curlftpfs}
       \ FUSE_MOUNT2|curlftpfs -o ftp_port=-,,disable_eprt %PARAM %DESTINATION_DIR %FOREGROUND,

" Fuse7z and 7z archives
filetype *.7z
       \ {Mount with fuse-7z}
       \ FUSE_MOUNT|fuse-7z %SOURCE_FILE %DESTINATION_DIR,
fileviewer *.7z 7z l %c

" Office files
filextype *.odt,*.doc,*.docx,*.xls,*.xlsx,*.odp,*.pptx libreoffice %f &
fileviewer *.doc catdoc %c
fileviewer *.docx docx2txt.pl %f -

" TuDu files
filetype *.tudu tudu -f %c

" Qt projects
filextype *.pro qtcreator %f &

" Directories
filextype */
        \ {View in thunar}
        \ Thunar %f &,
fileviewer */
        \ tree

" Syntax highlighting in preview
"
" Explicitly set highlight type for some extensions
"
" 256-color terminal
" fileviewer *.[ch],*.[ch]pp highlight -O xterm256 -s dante --syntax c %c
" fileviewer Makefile,Makefile.* highlight -O xterm256 -s dante --syntax make %c
"
" 16-color terminal
" fileviewer *.c,*.h highlight -O ansi -s dante %c
"
" Or leave it for automatic detection
"
" fileviewer *[^/] pygmentize -O style=monokai -f console256 -g

" Displaying pictures in terminal
"
" fileviewer *.jpg,*.png shellpic %c

filetype *
        \ {view in neovim}
        \ ~/MyScripts/open_file_with_nvim_remote.sh "%"f:p",
fileviewer *
        \ bat --color always --wrap never --pager never %c -p
" ------------------------------------------------------------------------------

" What should be saved automatically between vifm runs
" Like in previous versions of vifm
" set vifminfo=options,filetypes,commands,bookmarks,dhistory,state,cs
" Like in vi
set vifminfo=dhistory,savedirs,chistory,state,tui,shistory,
    \phistory,fhistory,dirstack,registers,bookmarks,bmarks

" ------------------------------------------------------------------------------

windo set viewcolumns=-{name}..,14{mtime},9{size}

"Open all images in current directory in sxiv thumbnail mode
nnoremap sx :!sxiv -t %d & <cr>

"nnoremap i <c-g>

nnoremap mm :mountMtp | cd ~/mnt<cr>
nnoremap mu :unmountMtp<cr>
nnoremap gm :cd /run/user/1000/gvfs<cr>"goto mount directory

"Open selected images in gimp
nnoremap gp :!gimp %f & <cr>

" Start shell in current directory
nnoremap sh :shell<cr>

" Display sorting dialog
nnoremap S :sort<cr>

" Toggle visibility of preview window
nnoremap w :if layoutis('only') | vsplit | endif | view<cr>
vnoremap w :if layoutis('only') | vsplit | endif | view<cr>gv

" Yank current directory path into the clipboard
nnoremap yd :!echo -n %d | xclip -in -selection clipboard %i<cr>:echo expand('%"d') "is yanked to clipboard"<cr>

" Yank current file path into the clipboard
nnoremap yf :!printf "%%s\n" %f:p | xclip -in -selection clipboard -rmlastnl %i<cr>:echo expand('%"f:p') "is yanked to clipboard"<cr>

" Mappings for faster renaming
nnoremap I cw<c-a>
nnoremap cc cw<c-u>
nnoremap A cw

" Mappings for select/unselect
nnoremap t tj
nnoremap T tk

" Mapping for visual selection of all files
nnoremap vv :%select<cr>

" Set the same directory in the other panel
nnoremap sy :sync<cr>

" Reload config
nnoremap <silent> rl :reload<cr>

"rename file in vim
nnoremap <silent> rn :rename<cr>

" goto history
nnoremap <silent> o :history<cr>

" Open console in current directory
nnoremap ,t :!kitty &<cr>

" Open editor to edit vifmrc and apply settings after returning to vifm
nnoremap ,c :write | edit $MYVIFMRC | restart<cr>
" Open gvim to edit vifmrc
nnoremap ,C :!gvim --remote-tab-silent $MYVIFMRC &<cr>

" Toggle wrap setting on ,w key
nnoremap ,w :set wrap!<cr>

"send file using kdeconnect
nnoremap sf :sendFile<cr>

" mkdir -p directory
nnoremap md :md<space>

" mkdir && cd to the directory
nnoremap mc :mc<space>

" Touch file
nnoremap mf :touch<space>

" Repeat name substitution
nnoremap su :su<cr>

nnoremap qq :q<cr>

" FZF mapping
nnoremap <silent> <a-c> :fzffolder<cr>
nnoremap <silent> <c-t> :fzffile<cr>
nnoremap p ""p


" Use < and > without ctrl-w prefix key in normal mode
nnoremap < <c-w><
nnoremap > <c-w>>
nnoremap = <c-w>=
" ------------------------------------------------------------------------------

" Use ag (the silver searcher) instead of grep
"
" set grepprg='ag --line-numbers %i %a %s'

" Add additional place to look for executables
"
" let $PATH = $HOME.'/bin/fuse:'.$PATH

" Block particular shortcut
"
" nnoremap <left> <nop>

" Export IPC name of current instance as environment variable and use it to
" communicate with the instance later.
"
" It can be used in some shell script that gets run from inside vifm, for
" example, like this:
"     vifm --server-name "$VIFM_SERVER_NAME" --remote +"cd '$PWD'"

source ~/.config/vifm/favicon.txt
set previewoptions+=graphicsdelay:0
