{
  "Bloc": {
    "prefix": "bloc",
    "body": [
      "class ${1:Subject}Bloc extends Bloc<${2:$1Event}, ${3:$1State}> {",
      "\t$7",
      "\t${1:Subject}Bloc($4) : super(${5:${1:Subject}Initial($6)}) {",
      "\t\t$8",
      "\t}",
      "\t\t$9",
      "}"
    ]
  },
  "Cubit": {
    "prefix": "cubit",
    "body": [
      "class ${1:Subject}Cubit extends Cubit<${2:$1State}> {",
      "\t${1:Subject}Cubit() : super(${3${1:Subject}Initial()});",
      "\t$4",
      "}"
    ]
  },
  "BlocObserver": {
    "prefix": "blocobserver",
    "body": [
      "import 'package:bloc/bloc.dart';",
      "",
      "class ${1:My}BlocObserver extends BlocObserver {",
      "\t@override",
      "\tvoid onEvent(Bloc bloc, Object? event) {",
      "\t\tsuper.onEvent(bloc, event);",
      "\t\t${2:// TODO: implement onEvent}",
      "\t}",
      "",
      "\t@override",
      "\tvoid onError(BlocBase bloc, Object error, StackTrace stacktrace) {",
      "\t\t${3:// TODO: implement onError}",
      "\t\tsuper.onError(bloc, error, stacktrace);",
      "\t}",
      "",
      "\t@override",
      "\tvoid onChange(BlocBase bloc, Change change) {",
      "\t\tsuper.onChange(bloc, change);",
      "\t\t${4:// TODO: implement onChange}",
      "\t}",
      "",
      "\t@override",
      "\tvoid onTransition(Bloc bloc, Transition transition) {",
      "\t\tsuper.onTransition(bloc, transition);",
      "\t\t${4:// TODO: implement onTransition}",
      "\t}",
      "}"
    ]
  },
  "Bloc State": {
    "prefix": "blocstate",
    "body": [
      "class ${1:Subject}${2:Verb}${3:State} extends $1State {",
      "\tconst $1$2$3($5);",
      "",
      "\t$4",
      "",
      "\t@override",
      "\tList<Object> get props => [$6];",
      "}"
    ],
    "description": "Subject + Verb (action) + State"
  },
  "Bloc Event": {
    "prefix": "blocevent",
    "body": [
      "class ${1:Subject}${2:Noun}${3:Verb} extends $1Event {",
      "\tconst $1$2$3($5);",
      "",
      "\t$4",
      "",
      "\t@override",
      "\tList<Object> get props => [$6];",
      "}"
    ],
    "description": "Subject + Noun (optional) + Verb (event)"
  },
  "Import package:bloc": {
    "prefix": "importbloc",
    "body": "import 'package:bloc/bloc.dart';",
    "description": "import package:bloc/bloc.dart;"
  },
  "Add Event Handler": {
    "prefix": "onevent",
    "body": [
      "on<${1:Event}>((event, emit) {",
      "\t${2:// TODO: implement event handler}",
      "\t$3",
      "});"
    ],
    "description": "Register a new EventHandler"
  },
  "Add Complex Event Handler": {
    "prefix": "_onevent",
    "body": [
      "on<${1:Event}>(_on$1);"
    ],
    "description": "Register a new Complex Event Handler"
  },
  "Add Complex Event Function": {
    "prefix": "_on",
    "body": [
    "void _on${1:Event}(${2:Event} event, Emitter<${3:State}> emit) {",
    "\t$4",
    "}"
    ],
    "description": "Add Complex Event Function"
  },
  "Add Cubit Method": {
    "prefix": "cubitM",
    "body": [
      "void ${1:Verb}() {",
      "\t$2",
      "}"
    ],
    "description": "Add Cubit Method"
  },
  "emit State": {
    "prefix": "emit",
    "body": [
      "emit(${1:state});"
    ],
    "description": "emit State"
  }
}
